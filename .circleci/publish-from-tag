#!/bin/bash

set -euxo pipefail

# Set up a git email/name so we can run other git commands
git config user.email "publish@circleci.com"
git config user.name "Circle CI"

# Validate github's fingerprint before using ssh to push to the repo
# https://serverfault.com/a/701637/132285
ssh-keyscan github.com >> /tmp/githubkey
[[ "$(ssh-keygen -lf /tmp/githubkey)" == "2048 SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8 github.com (RSA)" ]]
[[ -d ~/.ssh ]] || mkdir ~/.ssh
cat /tmp/githubkey >> ~/.ssh/known_hosts

# Determine the trigger tag name
trigger_tag="$(git describe --tags --match 'publish-*' HEAD)"

# Derive how to increment version from the trigger tag
increment="${trigger_tag#publish-}"

# Make sure we've got valid instructions
[[ "$increment" =~ ^(prerelease|patch|minor|major)$ ]]

# We don't know which exact branch to update based on the tag that was created,
# so just update all branches that point to the commit that was tagged. This
# builds an array of all remote branches that need to be updated. Filters out
# symbolic refs like `refs/remotes/origin/HEAD`.
readarray -t remote_branches_to_update < <(
  git for-each-ref 'refs/remotes/origin/**' --points-at=$trigger_tag --format="%(refname:strip=3) %(symref)" | grep " $"
)

# This increments the package.json version and adds a new git commit with tag
# referencing it
yarn version --new-version $increment

# Get the name of the newly created version tag
release_tag="$(git describe --tags --match 'v*' HEAD)"

# Ensure we got the correct tag
[[ "$release_tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9]+)?$ ]]

# Push git changes upstream. This always deletes the trigger tag, and then
# atomically adds the release tag and updates all branches that had previously
# pointed at the trigger tag. All refs must update successfully, or none will
# be updated and the script will exit before actually publishing to npm.
git push origin --delete refs/tags/$trigger_tag
git push origin --atomic $release_tag ${remote_branches_to_update[@]/#/HEAD:}

# Publish the new version. If this fails, it will leave the release tag (and
# commit) in git, but there will be no associated release in the npm registry.
# In that case, a developer can manually check out the release tag and run `npm
# publish` to publish the release to the registry.
yarn publish --non-interactive
