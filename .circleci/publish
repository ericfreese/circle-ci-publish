#!/bin/bash

set -euxo pipefail

[[ "$1" =~ (patch|minor|major) ]]

# Set up a git email/name so we can run other git commands
git config user.email "publish@circleci.com"
git config user.name "Circle CI"

# Validate github's fingerprint before using ssh to push to the repo
# https://serverfault.com/a/701637/132285
ssh-keyscan github.com >> /tmp/githubkey
[[ "$(ssh-keygen -lf /tmp/githubkey)" == "2048 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 github.com (RSA)" ]]
[[ -d ~/.ssh ]] || mkdir ~/.ssh
cat /tmp/githubkey >> ~/.ssh/known_hosts

# Locally and remotely delete the tag that was created to trigger this job.
# Prefix remote deletion with `refs/tags/` to ensure we don't accidentally
# delete a branch that happens to have the same name.
git tag --delete publish-$1
git push origin --delete refs/tags/publish-$1

# Keep track of the commit sha before we increment the version
publish_commit=$(git rev-parse HEAD)

# This increments the package.json version and adds a new git commit with tag
# referencing it
yarn version --new-version $1

# Keep track of the commit that yarn just added
new_commit=$(git rev-parse HEAD)

# We don't know which exact branch to update based on the tag that was created,
# so just update all branches that point to the commit that was tagged.
readarray -t branches_to_update < <(
  # If we had git v2.7.2, we could use `--points-at` instead of grep
  git for-each-ref refs/heads/\* --format="%(objectname) %(refname:short)" \
    | grep -Po "$publish_commit \K.+$"
)

# Pull each branch before merging the release commit into it in case a commit
# was pushed sometime after the trigger tag was created. Those commits won't be
# included in the new release, but it will keep the branches from diverging in
# that case.
for branch in ${branches_to_update[@]}; do
  git pull origin $branch
  git checkout $branch
  git merge $new_commit
done

# Make sure we're back at the release commit after updating the branches
git checkout $new_commit

# If we had git v2.4.0, we could use `git push --atomic` to push the tag and
# all updated branches together atomically. Until then, if we get a partial
# push, the job will fail and someone will just have to clean up the git
# branches manually. We push the branches before the tag since they're more
# likely to fail than the tag.
for branch in ${branches_to_update[@]}; do
  git push origin $branch
done

# We've successfully pushed all the updated branches, push the release tag
git push origin --tags

# Publish the new version. The version of `yarn` that comes with this docker
# image (v1.5.1) is not able to publish without incrementing the package
# version, so we use `npm` for this step [1]. If this fails, it will leave the
# release tag (and commit) in git, but there will be no associated release in
# the npm registry. In that case, a developer can manually check out the
# release tag and run `npm publish` to publish the release to the registry.
# 1: https://github.com/yarnpkg/yarn/issues/5623
npm publish

